// Mocks generated by Mockito 5.4.6 from annotations
// in coptic_pulse/test/widget/screens/new_post_page_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:io' as _i8;
import 'dart:ui' as _i5;

import 'package:coptic_pulse/models/post.dart' as _i2;
import 'package:coptic_pulse/providers/auth_provider.dart' as _i3;
import 'package:coptic_pulse/providers/post_provider.dart' as _i6;
import 'package:coptic_pulse/services/file_upload_service.dart' as _i7;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i9;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakePost_0 extends _i1.SmartFake implements _i2.Post {
  _FakePost_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [AuthProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthProvider extends _i1.Mock implements _i3.AuthProvider {
  MockAuthProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isLoading =>
      (super.noSuchMethod(Invocation.getter(#isLoading), returnValue: false)
          as bool);

  @override
  bool get isAuthenticated =>
      (super.noSuchMethod(
            Invocation.getter(#isAuthenticated),
            returnValue: false,
          )
          as bool);

  @override
  bool get isAdmin =>
      (super.noSuchMethod(Invocation.getter(#isAdmin), returnValue: false)
          as bool);

  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);

  @override
  _i4.Future<void> initialize() =>
      (super.noSuchMethod(
            Invocation.method(#initialize, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<bool> login(String? email, String? password) =>
      (super.noSuchMethod(
            Invocation.method(#login, [email, password]),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  _i4.Future<void> logout() =>
      (super.noSuchMethod(
            Invocation.method(#logout, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<bool> refreshToken() =>
      (super.noSuchMethod(
            Invocation.method(#refreshToken, []),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  _i4.Future<bool> validateSession() =>
      (super.noSuchMethod(
            Invocation.method(#validateSession, []),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  void clearError() => super.noSuchMethod(
    Invocation.method(#clearError, []),
    returnValueForMissingStub: null,
  );

  @override
  void addListener(_i5.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#addListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void removeListener(_i5.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#removeListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  void notifyListeners() => super.noSuchMethod(
    Invocation.method(#notifyListeners, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [PostProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockPostProvider extends _i1.Mock implements _i6.PostProvider {
  MockPostProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i2.Post> get posts =>
      (super.noSuchMethod(Invocation.getter(#posts), returnValue: <_i2.Post>[])
          as List<_i2.Post>);

  @override
  bool get isLoading =>
      (super.noSuchMethod(Invocation.getter(#isLoading), returnValue: false)
          as bool);

  @override
  bool get isLoadingMore =>
      (super.noSuchMethod(Invocation.getter(#isLoadingMore), returnValue: false)
          as bool);

  @override
  bool get hasNextPage =>
      (super.noSuchMethod(Invocation.getter(#hasNextPage), returnValue: false)
          as bool);

  @override
  bool get isFiltered =>
      (super.noSuchMethod(Invocation.getter(#isFiltered), returnValue: false)
          as bool);

  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);

  @override
  _i4.Future<void> loadPosts({_i2.PostType? type, bool? refresh = false}) =>
      (super.noSuchMethod(
            Invocation.method(#loadPosts, [], {#type: type, #refresh: refresh}),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> loadMorePosts() =>
      (super.noSuchMethod(
            Invocation.method(#loadMorePosts, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> searchPosts(String? query) =>
      (super.noSuchMethod(
            Invocation.method(#searchPosts, [query]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> filterByType(_i2.PostType? type) =>
      (super.noSuchMethod(
            Invocation.method(#filterByType, [type]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> clearFilters() =>
      (super.noSuchMethod(
            Invocation.method(#clearFilters, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> refreshPosts() =>
      (super.noSuchMethod(
            Invocation.method(#refreshPosts, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<_i2.Post?> getPost(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#getPost, [id]),
            returnValue: _i4.Future<_i2.Post?>.value(),
          )
          as _i4.Future<_i2.Post?>);

  @override
  void addPost(_i2.Post? post) => super.noSuchMethod(
    Invocation.method(#addPost, [post]),
    returnValueForMissingStub: null,
  );

  @override
  void updatePost(_i2.Post? updatedPost) => super.noSuchMethod(
    Invocation.method(#updatePost, [updatedPost]),
    returnValueForMissingStub: null,
  );

  @override
  void removePost(String? postId) => super.noSuchMethod(
    Invocation.method(#removePost, [postId]),
    returnValueForMissingStub: null,
  );

  @override
  _i4.Future<_i2.Post> createPost(_i2.Post? post) =>
      (super.noSuchMethod(
            Invocation.method(#createPost, [post]),
            returnValue: _i4.Future<_i2.Post>.value(
              _FakePost_0(this, Invocation.method(#createPost, [post])),
            ),
          )
          as _i4.Future<_i2.Post>);

  @override
  void clearError() => super.noSuchMethod(
    Invocation.method(#clearError, []),
    returnValueForMissingStub: null,
  );

  @override
  void addListener(_i5.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#addListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void removeListener(_i5.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#removeListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  void notifyListeners() => super.noSuchMethod(
    Invocation.method(#notifyListeners, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [FileUploadService].
///
/// See the documentation for Mockito's code generation for more information.
class MockFileUploadService extends _i1.Mock implements _i7.FileUploadService {
  MockFileUploadService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<String> uploadFile(_i8.File? file) =>
      (super.noSuchMethod(
            Invocation.method(#uploadFile, [file]),
            returnValue: _i4.Future<String>.value(
              _i9.dummyValue<String>(
                this,
                Invocation.method(#uploadFile, [file]),
              ),
            ),
          )
          as _i4.Future<String>);

  @override
  _i4.Future<List<String>> uploadFiles(List<_i8.File>? files) =>
      (super.noSuchMethod(
            Invocation.method(#uploadFiles, [files]),
            returnValue: _i4.Future<List<String>>.value(<String>[]),
          )
          as _i4.Future<List<String>>);
}
