// Mocks generated by Mockito 5.4.6 from annotations
// in coptic_pulse/test/unit/providers/sermon_provider_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:coptic_pulse/models/sermon.dart' as _i2;
import 'package:coptic_pulse/services/sermon_service.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeSermon_0 extends _i1.SmartFake implements _i2.Sermon {
  _FakeSermon_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [SermonService].
///
/// See the documentation for Mockito's code generation for more information.
class MockSermonService extends _i1.Mock implements _i3.SermonService {
  MockSermonService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i2.Sermon>> getSermons({
    int? page = 1,
    int? limit = 20,
    String? search,
    List<String>? tags,
    String? speaker,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getSermons, [], {
              #page: page,
              #limit: limit,
              #search: search,
              #tags: tags,
              #speaker: speaker,
            }),
            returnValue: _i4.Future<List<_i2.Sermon>>.value(<_i2.Sermon>[]),
          )
          as _i4.Future<List<_i2.Sermon>>);

  @override
  _i4.Future<_i2.Sermon> getSermonById(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#getSermonById, [id]),
            returnValue: _i4.Future<_i2.Sermon>.value(
              _FakeSermon_0(this, Invocation.method(#getSermonById, [id])),
            ),
          )
          as _i4.Future<_i2.Sermon>);

  @override
  _i4.Future<List<String>> getSermonTags() =>
      (super.noSuchMethod(
            Invocation.method(#getSermonTags, []),
            returnValue: _i4.Future<List<String>>.value(<String>[]),
          )
          as _i4.Future<List<String>>);

  @override
  _i4.Future<List<String>> getSpeakers() =>
      (super.noSuchMethod(
            Invocation.method(#getSpeakers, []),
            returnValue: _i4.Future<List<String>>.value(<String>[]),
          )
          as _i4.Future<List<String>>);

  @override
  _i4.Future<List<_i2.Sermon>> searchSermons(
    String? query, {
    int? page = 1,
    int? limit = 20,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #searchSermons,
              [query],
              {#page: page, #limit: limit},
            ),
            returnValue: _i4.Future<List<_i2.Sermon>>.value(<_i2.Sermon>[]),
          )
          as _i4.Future<List<_i2.Sermon>>);

  @override
  _i4.Future<List<_i2.Sermon>> filterSermonsByTags(
    List<String>? tags, {
    int? page = 1,
    int? limit = 20,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #filterSermonsByTags,
              [tags],
              {#page: page, #limit: limit},
            ),
            returnValue: _i4.Future<List<_i2.Sermon>>.value(<_i2.Sermon>[]),
          )
          as _i4.Future<List<_i2.Sermon>>);

  @override
  _i4.Future<List<_i2.Sermon>> filterSermonsBySpeaker(
    String? speaker, {
    int? page = 1,
    int? limit = 20,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #filterSermonsBySpeaker,
              [speaker],
              {#page: page, #limit: limit},
            ),
            returnValue: _i4.Future<List<_i2.Sermon>>.value(<_i2.Sermon>[]),
          )
          as _i4.Future<List<_i2.Sermon>>);

  @override
  _i4.Future<List<_i2.Sermon>> getRecentSermons({int? limit = 10}) =>
      (super.noSuchMethod(
            Invocation.method(#getRecentSermons, [], {#limit: limit}),
            returnValue: _i4.Future<List<_i2.Sermon>>.value(<_i2.Sermon>[]),
          )
          as _i4.Future<List<_i2.Sermon>>);
}
