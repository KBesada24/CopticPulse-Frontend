// Mocks generated by Mockito 5.4.6 from annotations
// in coptic_pulse/test/unit/providers/post_provider_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:coptic_pulse/models/post.dart' as _i3;
import 'package:coptic_pulse/services/post_service.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakePostResponse_0 extends _i1.SmartFake implements _i2.PostResponse {
  _FakePostResponse_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakePost_1 extends _i1.SmartFake implements _i3.Post {
  _FakePost_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [PostService].
///
/// See the documentation for Mockito's code generation for more information.
class MockPostService extends _i1.Mock implements _i2.PostService {
  MockPostService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.PostResponse> getPosts({
    _i3.PostType? type,
    int? page = 1,
    int? limit = 20,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getPosts, [], {
              #type: type,
              #page: page,
              #limit: limit,
            }),
            returnValue: _i4.Future<_i2.PostResponse>.value(
              _FakePostResponse_0(
                this,
                Invocation.method(#getPosts, [], {
                  #type: type,
                  #page: page,
                  #limit: limit,
                }),
              ),
            ),
          )
          as _i4.Future<_i2.PostResponse>);

  @override
  _i4.Future<_i3.Post> getPost(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#getPost, [id]),
            returnValue: _i4.Future<_i3.Post>.value(
              _FakePost_1(this, Invocation.method(#getPost, [id])),
            ),
          )
          as _i4.Future<_i3.Post>);

  @override
  _i4.Future<_i3.Post> createPost(_i3.Post? post) =>
      (super.noSuchMethod(
            Invocation.method(#createPost, [post]),
            returnValue: _i4.Future<_i3.Post>.value(
              _FakePost_1(this, Invocation.method(#createPost, [post])),
            ),
          )
          as _i4.Future<_i3.Post>);

  @override
  _i4.Future<_i3.Post> updatePost(String? id, _i3.Post? post) =>
      (super.noSuchMethod(
            Invocation.method(#updatePost, [id, post]),
            returnValue: _i4.Future<_i3.Post>.value(
              _FakePost_1(this, Invocation.method(#updatePost, [id, post])),
            ),
          )
          as _i4.Future<_i3.Post>);

  @override
  _i4.Future<void> deletePost(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#deletePost, [id]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<_i2.PostResponse> searchPosts({
    required String? query,
    _i3.PostType? type,
    int? page = 1,
    int? limit = 20,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#searchPosts, [], {
              #query: query,
              #type: type,
              #page: page,
              #limit: limit,
            }),
            returnValue: _i4.Future<_i2.PostResponse>.value(
              _FakePostResponse_0(
                this,
                Invocation.method(#searchPosts, [], {
                  #query: query,
                  #type: type,
                  #page: page,
                  #limit: limit,
                }),
              ),
            ),
          )
          as _i4.Future<_i2.PostResponse>);
}
