// Mocks generated by Mockito 5.4.6 from annotations
// in coptic_pulse/test/offline_functionality_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i10;

import 'package:coptic_pulse/database/database_helper.dart' as _i2;
import 'package:coptic_pulse/models/cache_metadata.dart' as _i11;
import 'package:coptic_pulse/models/liturgy_event.dart' as _i4;
import 'package:coptic_pulse/models/post.dart' as _i3;
import 'package:coptic_pulse/models/sermon.dart' as _i5;
import 'package:coptic_pulse/repositories/liturgy_repository.dart' as _i12;
import 'package:coptic_pulse/repositories/post_repository.dart' as _i8;
import 'package:coptic_pulse/repositories/sermon_repository.dart' as _i13;
import 'package:coptic_pulse/services/liturgy_service.dart' as _i14;
import 'package:coptic_pulse/services/post_service.dart' as _i6;
import 'package:coptic_pulse/services/sermon_service.dart' as _i15;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i9;
import 'package:sqflite/sqflite.dart' as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDatabaseHelper_0 extends _i1.SmartFake
    implements _i2.DatabaseHelper {
  _FakeDatabaseHelper_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakePost_1 extends _i1.SmartFake implements _i3.Post {
  _FakePost_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeLiturgyEvent_2 extends _i1.SmartFake implements _i4.LiturgyEvent {
  _FakeLiturgyEvent_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeSermon_3 extends _i1.SmartFake implements _i5.Sermon {
  _FakeSermon_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakePostResponse_4 extends _i1.SmartFake implements _i6.PostResponse {
  _FakePostResponse_4(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeDatabase_5 extends _i1.SmartFake implements _i7.Database {
  _FakeDatabase_5(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [PostRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockPostRepository extends _i1.Mock implements _i8.PostRepository {
  MockPostRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get tableName =>
      (super.noSuchMethod(
            Invocation.getter(#tableName),
            returnValue: _i9.dummyValue<String>(
              this,
              Invocation.getter(#tableName),
            ),
          )
          as String);

  @override
  String get cacheKeyPrefix =>
      (super.noSuchMethod(
            Invocation.getter(#cacheKeyPrefix),
            returnValue: _i9.dummyValue<String>(
              this,
              Invocation.getter(#cacheKeyPrefix),
            ),
          )
          as String);

  @override
  _i2.DatabaseHelper get databaseHelper =>
      (super.noSuchMethod(
            Invocation.getter(#databaseHelper),
            returnValue: _FakeDatabaseHelper_0(
              this,
              Invocation.getter(#databaseHelper),
            ),
          )
          as _i2.DatabaseHelper);

  @override
  Map<String, dynamic> toDatabase(_i3.Post? model) =>
      (super.noSuchMethod(
            Invocation.method(#toDatabase, [model]),
            returnValue: <String, dynamic>{},
          )
          as Map<String, dynamic>);

  @override
  _i3.Post fromDatabase(Map<String, dynamic>? map) =>
      (super.noSuchMethod(
            Invocation.method(#fromDatabase, [map]),
            returnValue: _FakePost_1(
              this,
              Invocation.method(#fromDatabase, [map]),
            ),
          )
          as _i3.Post);

  @override
  _i10.Future<List<_i3.Post>> getCachedPostsByType(_i3.PostType? type) =>
      (super.noSuchMethod(
            Invocation.method(#getCachedPostsByType, [type]),
            returnValue: _i10.Future<List<_i3.Post>>.value(<_i3.Post>[]),
          )
          as _i10.Future<List<_i3.Post>>);

  @override
  _i10.Future<List<_i3.Post>> getCachedApprovedPosts() =>
      (super.noSuchMethod(
            Invocation.method(#getCachedApprovedPosts, []),
            returnValue: _i10.Future<List<_i3.Post>>.value(<_i3.Post>[]),
          )
          as _i10.Future<List<_i3.Post>>);

  @override
  _i10.Future<List<_i3.Post>> getCachedPostsByAuthor(String? authorId) =>
      (super.noSuchMethod(
            Invocation.method(#getCachedPostsByAuthor, [authorId]),
            returnValue: _i10.Future<List<_i3.Post>>.value(<_i3.Post>[]),
          )
          as _i10.Future<List<_i3.Post>>);

  @override
  _i10.Future<List<_i3.Post>> searchCachedPosts(String? query) =>
      (super.noSuchMethod(
            Invocation.method(#searchCachedPosts, [query]),
            returnValue: _i10.Future<List<_i3.Post>>.value(<_i3.Post>[]),
          )
          as _i10.Future<List<_i3.Post>>);

  @override
  _i10.Future<List<_i3.Post>> getCachedPostsPaginated({
    int? page = 1,
    int? limit = 20,
    _i3.PostType? type,
    _i3.PostStatus? status,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getCachedPostsPaginated, [], {
              #page: page,
              #limit: limit,
              #type: type,
              #status: status,
            }),
            returnValue: _i10.Future<List<_i3.Post>>.value(<_i3.Post>[]),
          )
          as _i10.Future<List<_i3.Post>>);

  @override
  _i10.Future<int> getCachedPostsCount({
    _i3.PostType? type,
    _i3.PostStatus? status,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getCachedPostsCount, [], {
              #type: type,
              #status: status,
            }),
            returnValue: _i10.Future<int>.value(0),
          )
          as _i10.Future<int>);

  @override
  _i10.Future<List<_i3.Post>> getCachedItems() =>
      (super.noSuchMethod(
            Invocation.method(#getCachedItems, []),
            returnValue: _i10.Future<List<_i3.Post>>.value(<_i3.Post>[]),
          )
          as _i10.Future<List<_i3.Post>>);

  @override
  _i10.Future<_i3.Post?> getCachedItem(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#getCachedItem, [id]),
            returnValue: _i10.Future<_i3.Post?>.value(),
          )
          as _i10.Future<_i3.Post?>);

  @override
  _i10.Future<void> cacheItem(_i3.Post? item) =>
      (super.noSuchMethod(
            Invocation.method(#cacheItem, [item]),
            returnValue: _i10.Future<void>.value(),
            returnValueForMissingStub: _i10.Future<void>.value(),
          )
          as _i10.Future<void>);

  @override
  _i10.Future<void> cacheItems(List<_i3.Post>? items) =>
      (super.noSuchMethod(
            Invocation.method(#cacheItems, [items]),
            returnValue: _i10.Future<void>.value(),
            returnValueForMissingStub: _i10.Future<void>.value(),
          )
          as _i10.Future<void>);

  @override
  _i10.Future<void> removeCachedItem(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#removeCachedItem, [id]),
            returnValue: _i10.Future<void>.value(),
            returnValueForMissingStub: _i10.Future<void>.value(),
          )
          as _i10.Future<void>);

  @override
  _i10.Future<void> clearCache() =>
      (super.noSuchMethod(
            Invocation.method(#clearCache, []),
            returnValue: _i10.Future<void>.value(),
            returnValueForMissingStub: _i10.Future<void>.value(),
          )
          as _i10.Future<void>);

  @override
  _i10.Future<_i11.CacheMetadata?> getCacheMetadata(String? key) =>
      (super.noSuchMethod(
            Invocation.method(#getCacheMetadata, [key]),
            returnValue: _i10.Future<_i11.CacheMetadata?>.value(),
          )
          as _i10.Future<_i11.CacheMetadata?>);

  @override
  _i10.Future<void> updateCacheMetadata(_i11.CacheMetadata? metadata) =>
      (super.noSuchMethod(
            Invocation.method(#updateCacheMetadata, [metadata]),
            returnValue: _i10.Future<void>.value(),
            returnValueForMissingStub: _i10.Future<void>.value(),
          )
          as _i10.Future<void>);

  @override
  _i10.Future<bool> isCacheValid(String? key) =>
      (super.noSuchMethod(
            Invocation.method(#isCacheValid, [key]),
            returnValue: _i10.Future<bool>.value(false),
          )
          as _i10.Future<bool>);

  @override
  _i10.Future<int> getCacheAge(String? key) =>
      (super.noSuchMethod(
            Invocation.method(#getCacheAge, [key]),
            returnValue: _i10.Future<int>.value(0),
          )
          as _i10.Future<int>);

  @override
  _i10.Future<void> markCacheAsSyncing(String? key) =>
      (super.noSuchMethod(
            Invocation.method(#markCacheAsSyncing, [key]),
            returnValue: _i10.Future<void>.value(),
            returnValueForMissingStub: _i10.Future<void>.value(),
          )
          as _i10.Future<void>);

  @override
  _i10.Future<void> markCacheAsSuccess(String? key, {Duration? expiresIn}) =>
      (super.noSuchMethod(
            Invocation.method(
              #markCacheAsSuccess,
              [key],
              {#expiresIn: expiresIn},
            ),
            returnValue: _i10.Future<void>.value(),
            returnValueForMissingStub: _i10.Future<void>.value(),
          )
          as _i10.Future<void>);

  @override
  _i10.Future<void> markCacheAsFailed(String? key) =>
      (super.noSuchMethod(
            Invocation.method(#markCacheAsFailed, [key]),
            returnValue: _i10.Future<void>.value(),
            returnValueForMissingStub: _i10.Future<void>.value(),
          )
          as _i10.Future<void>);

  @override
  String encodeList(List<String>? list) =>
      (super.noSuchMethod(
            Invocation.method(#encodeList, [list]),
            returnValue: _i9.dummyValue<String>(
              this,
              Invocation.method(#encodeList, [list]),
            ),
          )
          as String);

  @override
  List<String> decodeList(String? jsonString) =>
      (super.noSuchMethod(
            Invocation.method(#decodeList, [jsonString]),
            returnValue: <String>[],
          )
          as List<String>);
}

/// A class which mocks [LiturgyRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockLiturgyRepository extends _i1.Mock implements _i12.LiturgyRepository {
  MockLiturgyRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get tableName =>
      (super.noSuchMethod(
            Invocation.getter(#tableName),
            returnValue: _i9.dummyValue<String>(
              this,
              Invocation.getter(#tableName),
            ),
          )
          as String);

  @override
  String get cacheKeyPrefix =>
      (super.noSuchMethod(
            Invocation.getter(#cacheKeyPrefix),
            returnValue: _i9.dummyValue<String>(
              this,
              Invocation.getter(#cacheKeyPrefix),
            ),
          )
          as String);

  @override
  _i2.DatabaseHelper get databaseHelper =>
      (super.noSuchMethod(
            Invocation.getter(#databaseHelper),
            returnValue: _FakeDatabaseHelper_0(
              this,
              Invocation.getter(#databaseHelper),
            ),
          )
          as _i2.DatabaseHelper);

  @override
  Map<String, dynamic> toDatabase(_i4.LiturgyEvent? model) =>
      (super.noSuchMethod(
            Invocation.method(#toDatabase, [model]),
            returnValue: <String, dynamic>{},
          )
          as Map<String, dynamic>);

  @override
  _i4.LiturgyEvent fromDatabase(Map<String, dynamic>? map) =>
      (super.noSuchMethod(
            Invocation.method(#fromDatabase, [map]),
            returnValue: _FakeLiturgyEvent_2(
              this,
              Invocation.method(#fromDatabase, [map]),
            ),
          )
          as _i4.LiturgyEvent);

  @override
  _i10.Future<List<_i4.LiturgyEvent>> getCachedUpcomingEvents() =>
      (super.noSuchMethod(
            Invocation.method(#getCachedUpcomingEvents, []),
            returnValue: _i10.Future<List<_i4.LiturgyEvent>>.value(
              <_i4.LiturgyEvent>[],
            ),
          )
          as _i10.Future<List<_i4.LiturgyEvent>>);

  @override
  _i10.Future<List<_i4.LiturgyEvent>> getCachedEventsInRange({
    required DateTime? startDate,
    required DateTime? endDate,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getCachedEventsInRange, [], {
              #startDate: startDate,
              #endDate: endDate,
            }),
            returnValue: _i10.Future<List<_i4.LiturgyEvent>>.value(
              <_i4.LiturgyEvent>[],
            ),
          )
          as _i10.Future<List<_i4.LiturgyEvent>>);

  @override
  _i10.Future<List<_i4.LiturgyEvent>> getCachedEventsForMonth({
    required int? year,
    required int? month,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getCachedEventsForMonth, [], {
              #year: year,
              #month: month,
            }),
            returnValue: _i10.Future<List<_i4.LiturgyEvent>>.value(
              <_i4.LiturgyEvent>[],
            ),
          )
          as _i10.Future<List<_i4.LiturgyEvent>>);

  @override
  _i10.Future<List<_i4.LiturgyEvent>> getCachedEventsByServiceType(
    String? serviceType,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getCachedEventsByServiceType, [serviceType]),
            returnValue: _i10.Future<List<_i4.LiturgyEvent>>.value(
              <_i4.LiturgyEvent>[],
            ),
          )
          as _i10.Future<List<_i4.LiturgyEvent>>);

  @override
  _i10.Future<List<_i4.LiturgyEvent>> getCachedTodayEvents() =>
      (super.noSuchMethod(
            Invocation.method(#getCachedTodayEvents, []),
            returnValue: _i10.Future<List<_i4.LiturgyEvent>>.value(
              <_i4.LiturgyEvent>[],
            ),
          )
          as _i10.Future<List<_i4.LiturgyEvent>>);

  @override
  _i10.Future<List<_i4.LiturgyEvent>> getCachedWeekEvents() =>
      (super.noSuchMethod(
            Invocation.method(#getCachedWeekEvents, []),
            returnValue: _i10.Future<List<_i4.LiturgyEvent>>.value(
              <_i4.LiturgyEvent>[],
            ),
          )
          as _i10.Future<List<_i4.LiturgyEvent>>);

  @override
  _i10.Future<List<_i4.LiturgyEvent>> searchCachedEvents(String? query) =>
      (super.noSuchMethod(
            Invocation.method(#searchCachedEvents, [query]),
            returnValue: _i10.Future<List<_i4.LiturgyEvent>>.value(
              <_i4.LiturgyEvent>[],
            ),
          )
          as _i10.Future<List<_i4.LiturgyEvent>>);

  @override
  _i10.Future<List<_i4.LiturgyEvent>> getCachedEventsPaginated({
    int? page = 1,
    int? limit = 20,
    bool? upcomingOnly = true,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getCachedEventsPaginated, [], {
              #page: page,
              #limit: limit,
              #upcomingOnly: upcomingOnly,
            }),
            returnValue: _i10.Future<List<_i4.LiturgyEvent>>.value(
              <_i4.LiturgyEvent>[],
            ),
          )
          as _i10.Future<List<_i4.LiturgyEvent>>);

  @override
  _i10.Future<int> getCachedEventsCount({bool? upcomingOnly = true}) =>
      (super.noSuchMethod(
            Invocation.method(#getCachedEventsCount, [], {
              #upcomingOnly: upcomingOnly,
            }),
            returnValue: _i10.Future<int>.value(0),
          )
          as _i10.Future<int>);

  @override
  _i10.Future<List<_i4.LiturgyEvent>> getCachedItems() =>
      (super.noSuchMethod(
            Invocation.method(#getCachedItems, []),
            returnValue: _i10.Future<List<_i4.LiturgyEvent>>.value(
              <_i4.LiturgyEvent>[],
            ),
          )
          as _i10.Future<List<_i4.LiturgyEvent>>);

  @override
  _i10.Future<_i4.LiturgyEvent?> getCachedItem(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#getCachedItem, [id]),
            returnValue: _i10.Future<_i4.LiturgyEvent?>.value(),
          )
          as _i10.Future<_i4.LiturgyEvent?>);

  @override
  _i10.Future<void> cacheItem(_i4.LiturgyEvent? item) =>
      (super.noSuchMethod(
            Invocation.method(#cacheItem, [item]),
            returnValue: _i10.Future<void>.value(),
            returnValueForMissingStub: _i10.Future<void>.value(),
          )
          as _i10.Future<void>);

  @override
  _i10.Future<void> cacheItems(List<_i4.LiturgyEvent>? items) =>
      (super.noSuchMethod(
            Invocation.method(#cacheItems, [items]),
            returnValue: _i10.Future<void>.value(),
            returnValueForMissingStub: _i10.Future<void>.value(),
          )
          as _i10.Future<void>);

  @override
  _i10.Future<void> removeCachedItem(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#removeCachedItem, [id]),
            returnValue: _i10.Future<void>.value(),
            returnValueForMissingStub: _i10.Future<void>.value(),
          )
          as _i10.Future<void>);

  @override
  _i10.Future<void> clearCache() =>
      (super.noSuchMethod(
            Invocation.method(#clearCache, []),
            returnValue: _i10.Future<void>.value(),
            returnValueForMissingStub: _i10.Future<void>.value(),
          )
          as _i10.Future<void>);

  @override
  _i10.Future<_i11.CacheMetadata?> getCacheMetadata(String? key) =>
      (super.noSuchMethod(
            Invocation.method(#getCacheMetadata, [key]),
            returnValue: _i10.Future<_i11.CacheMetadata?>.value(),
          )
          as _i10.Future<_i11.CacheMetadata?>);

  @override
  _i10.Future<void> updateCacheMetadata(_i11.CacheMetadata? metadata) =>
      (super.noSuchMethod(
            Invocation.method(#updateCacheMetadata, [metadata]),
            returnValue: _i10.Future<void>.value(),
            returnValueForMissingStub: _i10.Future<void>.value(),
          )
          as _i10.Future<void>);

  @override
  _i10.Future<bool> isCacheValid(String? key) =>
      (super.noSuchMethod(
            Invocation.method(#isCacheValid, [key]),
            returnValue: _i10.Future<bool>.value(false),
          )
          as _i10.Future<bool>);

  @override
  _i10.Future<int> getCacheAge(String? key) =>
      (super.noSuchMethod(
            Invocation.method(#getCacheAge, [key]),
            returnValue: _i10.Future<int>.value(0),
          )
          as _i10.Future<int>);

  @override
  _i10.Future<void> markCacheAsSyncing(String? key) =>
      (super.noSuchMethod(
            Invocation.method(#markCacheAsSyncing, [key]),
            returnValue: _i10.Future<void>.value(),
            returnValueForMissingStub: _i10.Future<void>.value(),
          )
          as _i10.Future<void>);

  @override
  _i10.Future<void> markCacheAsSuccess(String? key, {Duration? expiresIn}) =>
      (super.noSuchMethod(
            Invocation.method(
              #markCacheAsSuccess,
              [key],
              {#expiresIn: expiresIn},
            ),
            returnValue: _i10.Future<void>.value(),
            returnValueForMissingStub: _i10.Future<void>.value(),
          )
          as _i10.Future<void>);

  @override
  _i10.Future<void> markCacheAsFailed(String? key) =>
      (super.noSuchMethod(
            Invocation.method(#markCacheAsFailed, [key]),
            returnValue: _i10.Future<void>.value(),
            returnValueForMissingStub: _i10.Future<void>.value(),
          )
          as _i10.Future<void>);

  @override
  String encodeList(List<String>? list) =>
      (super.noSuchMethod(
            Invocation.method(#encodeList, [list]),
            returnValue: _i9.dummyValue<String>(
              this,
              Invocation.method(#encodeList, [list]),
            ),
          )
          as String);

  @override
  List<String> decodeList(String? jsonString) =>
      (super.noSuchMethod(
            Invocation.method(#decodeList, [jsonString]),
            returnValue: <String>[],
          )
          as List<String>);
}

/// A class which mocks [SermonRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockSermonRepository extends _i1.Mock implements _i13.SermonRepository {
  MockSermonRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get tableName =>
      (super.noSuchMethod(
            Invocation.getter(#tableName),
            returnValue: _i9.dummyValue<String>(
              this,
              Invocation.getter(#tableName),
            ),
          )
          as String);

  @override
  String get cacheKeyPrefix =>
      (super.noSuchMethod(
            Invocation.getter(#cacheKeyPrefix),
            returnValue: _i9.dummyValue<String>(
              this,
              Invocation.getter(#cacheKeyPrefix),
            ),
          )
          as String);

  @override
  _i2.DatabaseHelper get databaseHelper =>
      (super.noSuchMethod(
            Invocation.getter(#databaseHelper),
            returnValue: _FakeDatabaseHelper_0(
              this,
              Invocation.getter(#databaseHelper),
            ),
          )
          as _i2.DatabaseHelper);

  @override
  Map<String, dynamic> toDatabase(_i5.Sermon? model) =>
      (super.noSuchMethod(
            Invocation.method(#toDatabase, [model]),
            returnValue: <String, dynamic>{},
          )
          as Map<String, dynamic>);

  @override
  _i5.Sermon fromDatabase(Map<String, dynamic>? map) =>
      (super.noSuchMethod(
            Invocation.method(#fromDatabase, [map]),
            returnValue: _FakeSermon_3(
              this,
              Invocation.method(#fromDatabase, [map]),
            ),
          )
          as _i5.Sermon);

  @override
  _i10.Future<List<_i5.Sermon>> getCachedSermonsBySpeaker(String? speaker) =>
      (super.noSuchMethod(
            Invocation.method(#getCachedSermonsBySpeaker, [speaker]),
            returnValue: _i10.Future<List<_i5.Sermon>>.value(<_i5.Sermon>[]),
          )
          as _i10.Future<List<_i5.Sermon>>);

  @override
  _i10.Future<List<_i5.Sermon>> getCachedRecentSermons() =>
      (super.noSuchMethod(
            Invocation.method(#getCachedRecentSermons, []),
            returnValue: _i10.Future<List<_i5.Sermon>>.value(<_i5.Sermon>[]),
          )
          as _i10.Future<List<_i5.Sermon>>);

  @override
  _i10.Future<List<_i5.Sermon>> getCachedVideoSermons() =>
      (super.noSuchMethod(
            Invocation.method(#getCachedVideoSermons, []),
            returnValue: _i10.Future<List<_i5.Sermon>>.value(<_i5.Sermon>[]),
          )
          as _i10.Future<List<_i5.Sermon>>);

  @override
  _i10.Future<List<_i5.Sermon>> getCachedAudioSermons() =>
      (super.noSuchMethod(
            Invocation.method(#getCachedAudioSermons, []),
            returnValue: _i10.Future<List<_i5.Sermon>>.value(<_i5.Sermon>[]),
          )
          as _i10.Future<List<_i5.Sermon>>);

  @override
  _i10.Future<List<_i5.Sermon>> searchCachedSermons(String? query) =>
      (super.noSuchMethod(
            Invocation.method(#searchCachedSermons, [query]),
            returnValue: _i10.Future<List<_i5.Sermon>>.value(<_i5.Sermon>[]),
          )
          as _i10.Future<List<_i5.Sermon>>);

  @override
  _i10.Future<List<_i5.Sermon>> getCachedSermonsByTag(String? tag) =>
      (super.noSuchMethod(
            Invocation.method(#getCachedSermonsByTag, [tag]),
            returnValue: _i10.Future<List<_i5.Sermon>>.value(<_i5.Sermon>[]),
          )
          as _i10.Future<List<_i5.Sermon>>);

  @override
  _i10.Future<List<_i5.Sermon>> getCachedSermonsInRange({
    required DateTime? startDate,
    required DateTime? endDate,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getCachedSermonsInRange, [], {
              #startDate: startDate,
              #endDate: endDate,
            }),
            returnValue: _i10.Future<List<_i5.Sermon>>.value(<_i5.Sermon>[]),
          )
          as _i10.Future<List<_i5.Sermon>>);

  @override
  _i10.Future<List<_i5.Sermon>> getCachedSermonsPaginated({
    int? page = 1,
    int? limit = 20,
    String? speaker,
    bool? hasVideoOnly = false,
    bool? hasAudioOnly = false,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getCachedSermonsPaginated, [], {
              #page: page,
              #limit: limit,
              #speaker: speaker,
              #hasVideoOnly: hasVideoOnly,
              #hasAudioOnly: hasAudioOnly,
            }),
            returnValue: _i10.Future<List<_i5.Sermon>>.value(<_i5.Sermon>[]),
          )
          as _i10.Future<List<_i5.Sermon>>);

  @override
  _i10.Future<int> getCachedSermonsCount({
    String? speaker,
    bool? hasVideoOnly = false,
    bool? hasAudioOnly = false,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getCachedSermonsCount, [], {
              #speaker: speaker,
              #hasVideoOnly: hasVideoOnly,
              #hasAudioOnly: hasAudioOnly,
            }),
            returnValue: _i10.Future<int>.value(0),
          )
          as _i10.Future<int>);

  @override
  _i10.Future<List<String>> getCachedSpeakers() =>
      (super.noSuchMethod(
            Invocation.method(#getCachedSpeakers, []),
            returnValue: _i10.Future<List<String>>.value(<String>[]),
          )
          as _i10.Future<List<String>>);

  @override
  _i10.Future<List<String>> getCachedTags() =>
      (super.noSuchMethod(
            Invocation.method(#getCachedTags, []),
            returnValue: _i10.Future<List<String>>.value(<String>[]),
          )
          as _i10.Future<List<String>>);

  @override
  _i10.Future<List<_i5.Sermon>> getCachedItems() =>
      (super.noSuchMethod(
            Invocation.method(#getCachedItems, []),
            returnValue: _i10.Future<List<_i5.Sermon>>.value(<_i5.Sermon>[]),
          )
          as _i10.Future<List<_i5.Sermon>>);

  @override
  _i10.Future<_i5.Sermon?> getCachedItem(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#getCachedItem, [id]),
            returnValue: _i10.Future<_i5.Sermon?>.value(),
          )
          as _i10.Future<_i5.Sermon?>);

  @override
  _i10.Future<void> cacheItem(_i5.Sermon? item) =>
      (super.noSuchMethod(
            Invocation.method(#cacheItem, [item]),
            returnValue: _i10.Future<void>.value(),
            returnValueForMissingStub: _i10.Future<void>.value(),
          )
          as _i10.Future<void>);

  @override
  _i10.Future<void> cacheItems(List<_i5.Sermon>? items) =>
      (super.noSuchMethod(
            Invocation.method(#cacheItems, [items]),
            returnValue: _i10.Future<void>.value(),
            returnValueForMissingStub: _i10.Future<void>.value(),
          )
          as _i10.Future<void>);

  @override
  _i10.Future<void> removeCachedItem(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#removeCachedItem, [id]),
            returnValue: _i10.Future<void>.value(),
            returnValueForMissingStub: _i10.Future<void>.value(),
          )
          as _i10.Future<void>);

  @override
  _i10.Future<void> clearCache() =>
      (super.noSuchMethod(
            Invocation.method(#clearCache, []),
            returnValue: _i10.Future<void>.value(),
            returnValueForMissingStub: _i10.Future<void>.value(),
          )
          as _i10.Future<void>);

  @override
  _i10.Future<_i11.CacheMetadata?> getCacheMetadata(String? key) =>
      (super.noSuchMethod(
            Invocation.method(#getCacheMetadata, [key]),
            returnValue: _i10.Future<_i11.CacheMetadata?>.value(),
          )
          as _i10.Future<_i11.CacheMetadata?>);

  @override
  _i10.Future<void> updateCacheMetadata(_i11.CacheMetadata? metadata) =>
      (super.noSuchMethod(
            Invocation.method(#updateCacheMetadata, [metadata]),
            returnValue: _i10.Future<void>.value(),
            returnValueForMissingStub: _i10.Future<void>.value(),
          )
          as _i10.Future<void>);

  @override
  _i10.Future<bool> isCacheValid(String? key) =>
      (super.noSuchMethod(
            Invocation.method(#isCacheValid, [key]),
            returnValue: _i10.Future<bool>.value(false),
          )
          as _i10.Future<bool>);

  @override
  _i10.Future<int> getCacheAge(String? key) =>
      (super.noSuchMethod(
            Invocation.method(#getCacheAge, [key]),
            returnValue: _i10.Future<int>.value(0),
          )
          as _i10.Future<int>);

  @override
  _i10.Future<void> markCacheAsSyncing(String? key) =>
      (super.noSuchMethod(
            Invocation.method(#markCacheAsSyncing, [key]),
            returnValue: _i10.Future<void>.value(),
            returnValueForMissingStub: _i10.Future<void>.value(),
          )
          as _i10.Future<void>);

  @override
  _i10.Future<void> markCacheAsSuccess(String? key, {Duration? expiresIn}) =>
      (super.noSuchMethod(
            Invocation.method(
              #markCacheAsSuccess,
              [key],
              {#expiresIn: expiresIn},
            ),
            returnValue: _i10.Future<void>.value(),
            returnValueForMissingStub: _i10.Future<void>.value(),
          )
          as _i10.Future<void>);

  @override
  _i10.Future<void> markCacheAsFailed(String? key) =>
      (super.noSuchMethod(
            Invocation.method(#markCacheAsFailed, [key]),
            returnValue: _i10.Future<void>.value(),
            returnValueForMissingStub: _i10.Future<void>.value(),
          )
          as _i10.Future<void>);

  @override
  String encodeList(List<String>? list) =>
      (super.noSuchMethod(
            Invocation.method(#encodeList, [list]),
            returnValue: _i9.dummyValue<String>(
              this,
              Invocation.method(#encodeList, [list]),
            ),
          )
          as String);

  @override
  List<String> decodeList(String? jsonString) =>
      (super.noSuchMethod(
            Invocation.method(#decodeList, [jsonString]),
            returnValue: <String>[],
          )
          as List<String>);
}

/// A class which mocks [PostService].
///
/// See the documentation for Mockito's code generation for more information.
class MockPostService extends _i1.Mock implements _i6.PostService {
  MockPostService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i10.Future<_i6.PostResponse> getPosts({
    _i3.PostType? type,
    int? page = 1,
    int? limit = 20,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getPosts, [], {
              #type: type,
              #page: page,
              #limit: limit,
            }),
            returnValue: _i10.Future<_i6.PostResponse>.value(
              _FakePostResponse_4(
                this,
                Invocation.method(#getPosts, [], {
                  #type: type,
                  #page: page,
                  #limit: limit,
                }),
              ),
            ),
          )
          as _i10.Future<_i6.PostResponse>);

  @override
  _i10.Future<_i3.Post> getPost(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#getPost, [id]),
            returnValue: _i10.Future<_i3.Post>.value(
              _FakePost_1(this, Invocation.method(#getPost, [id])),
            ),
          )
          as _i10.Future<_i3.Post>);

  @override
  _i10.Future<_i3.Post> createPost(_i3.Post? post) =>
      (super.noSuchMethod(
            Invocation.method(#createPost, [post]),
            returnValue: _i10.Future<_i3.Post>.value(
              _FakePost_1(this, Invocation.method(#createPost, [post])),
            ),
          )
          as _i10.Future<_i3.Post>);

  @override
  _i10.Future<_i3.Post> updatePost(String? id, _i3.Post? post) =>
      (super.noSuchMethod(
            Invocation.method(#updatePost, [id, post]),
            returnValue: _i10.Future<_i3.Post>.value(
              _FakePost_1(this, Invocation.method(#updatePost, [id, post])),
            ),
          )
          as _i10.Future<_i3.Post>);

  @override
  _i10.Future<void> deletePost(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#deletePost, [id]),
            returnValue: _i10.Future<void>.value(),
            returnValueForMissingStub: _i10.Future<void>.value(),
          )
          as _i10.Future<void>);

  @override
  _i10.Future<_i6.PostResponse> searchPosts({
    required String? query,
    _i3.PostType? type,
    int? page = 1,
    int? limit = 20,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#searchPosts, [], {
              #query: query,
              #type: type,
              #page: page,
              #limit: limit,
            }),
            returnValue: _i10.Future<_i6.PostResponse>.value(
              _FakePostResponse_4(
                this,
                Invocation.method(#searchPosts, [], {
                  #query: query,
                  #type: type,
                  #page: page,
                  #limit: limit,
                }),
              ),
            ),
          )
          as _i10.Future<_i6.PostResponse>);
}

/// A class which mocks [LiturgyService].
///
/// See the documentation for Mockito's code generation for more information.
class MockLiturgyService extends _i1.Mock implements _i14.LiturgyService {
  MockLiturgyService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i10.Future<List<_i4.LiturgyEvent>> getLiturgyEvents({
    DateTime? startDate,
    DateTime? endDate,
    int? limit,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getLiturgyEvents, [], {
              #startDate: startDate,
              #endDate: endDate,
              #limit: limit,
            }),
            returnValue: _i10.Future<List<_i4.LiturgyEvent>>.value(
              <_i4.LiturgyEvent>[],
            ),
          )
          as _i10.Future<List<_i4.LiturgyEvent>>);

  @override
  _i10.Future<List<_i4.LiturgyEvent>> getLiturgyEventsForDate(DateTime? date) =>
      (super.noSuchMethod(
            Invocation.method(#getLiturgyEventsForDate, [date]),
            returnValue: _i10.Future<List<_i4.LiturgyEvent>>.value(
              <_i4.LiturgyEvent>[],
            ),
          )
          as _i10.Future<List<_i4.LiturgyEvent>>);

  @override
  _i10.Future<List<_i4.LiturgyEvent>> getUpcomingLiturgyEvents() =>
      (super.noSuchMethod(
            Invocation.method(#getUpcomingLiturgyEvents, []),
            returnValue: _i10.Future<List<_i4.LiturgyEvent>>.value(
              <_i4.LiturgyEvent>[],
            ),
          )
          as _i10.Future<List<_i4.LiturgyEvent>>);

  @override
  _i10.Future<List<_i4.LiturgyEvent>> getLiturgyEventsForMonth(
    DateTime? month,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getLiturgyEventsForMonth, [month]),
            returnValue: _i10.Future<List<_i4.LiturgyEvent>>.value(
              <_i4.LiturgyEvent>[],
            ),
          )
          as _i10.Future<List<_i4.LiturgyEvent>>);

  @override
  _i10.Future<_i4.LiturgyEvent?> getLiturgyEvent(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#getLiturgyEvent, [id]),
            returnValue: _i10.Future<_i4.LiturgyEvent?>.value(),
          )
          as _i10.Future<_i4.LiturgyEvent?>);
}

/// A class which mocks [SermonService].
///
/// See the documentation for Mockito's code generation for more information.
class MockSermonService extends _i1.Mock implements _i15.SermonService {
  MockSermonService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i10.Future<List<_i5.Sermon>> getSermons({
    int? page = 1,
    int? limit = 20,
    String? search,
    List<String>? tags,
    String? speaker,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getSermons, [], {
              #page: page,
              #limit: limit,
              #search: search,
              #tags: tags,
              #speaker: speaker,
            }),
            returnValue: _i10.Future<List<_i5.Sermon>>.value(<_i5.Sermon>[]),
          )
          as _i10.Future<List<_i5.Sermon>>);

  @override
  _i10.Future<_i5.Sermon> getSermonById(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#getSermonById, [id]),
            returnValue: _i10.Future<_i5.Sermon>.value(
              _FakeSermon_3(this, Invocation.method(#getSermonById, [id])),
            ),
          )
          as _i10.Future<_i5.Sermon>);

  @override
  _i10.Future<List<String>> getSermonTags() =>
      (super.noSuchMethod(
            Invocation.method(#getSermonTags, []),
            returnValue: _i10.Future<List<String>>.value(<String>[]),
          )
          as _i10.Future<List<String>>);

  @override
  _i10.Future<List<String>> getSpeakers() =>
      (super.noSuchMethod(
            Invocation.method(#getSpeakers, []),
            returnValue: _i10.Future<List<String>>.value(<String>[]),
          )
          as _i10.Future<List<String>>);

  @override
  _i10.Future<List<_i5.Sermon>> searchSermons(
    String? query, {
    int? page = 1,
    int? limit = 20,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #searchSermons,
              [query],
              {#page: page, #limit: limit},
            ),
            returnValue: _i10.Future<List<_i5.Sermon>>.value(<_i5.Sermon>[]),
          )
          as _i10.Future<List<_i5.Sermon>>);

  @override
  _i10.Future<List<_i5.Sermon>> filterSermonsByTags(
    List<String>? tags, {
    int? page = 1,
    int? limit = 20,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #filterSermonsByTags,
              [tags],
              {#page: page, #limit: limit},
            ),
            returnValue: _i10.Future<List<_i5.Sermon>>.value(<_i5.Sermon>[]),
          )
          as _i10.Future<List<_i5.Sermon>>);

  @override
  _i10.Future<List<_i5.Sermon>> filterSermonsBySpeaker(
    String? speaker, {
    int? page = 1,
    int? limit = 20,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #filterSermonsBySpeaker,
              [speaker],
              {#page: page, #limit: limit},
            ),
            returnValue: _i10.Future<List<_i5.Sermon>>.value(<_i5.Sermon>[]),
          )
          as _i10.Future<List<_i5.Sermon>>);

  @override
  _i10.Future<List<_i5.Sermon>> getRecentSermons({int? limit = 10}) =>
      (super.noSuchMethod(
            Invocation.method(#getRecentSermons, [], {#limit: limit}),
            returnValue: _i10.Future<List<_i5.Sermon>>.value(<_i5.Sermon>[]),
          )
          as _i10.Future<List<_i5.Sermon>>);
}

/// A class which mocks [DatabaseHelper].
///
/// See the documentation for Mockito's code generation for more information.
class MockDatabaseHelper extends _i1.Mock implements _i2.DatabaseHelper {
  MockDatabaseHelper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i10.Future<_i7.Database> get database =>
      (super.noSuchMethod(
            Invocation.getter(#database),
            returnValue: _i10.Future<_i7.Database>.value(
              _FakeDatabase_5(this, Invocation.getter(#database)),
            ),
          )
          as _i10.Future<_i7.Database>);

  @override
  _i10.Future<void> clearCache() =>
      (super.noSuchMethod(
            Invocation.method(#clearCache, []),
            returnValue: _i10.Future<void>.value(),
            returnValueForMissingStub: _i10.Future<void>.value(),
          )
          as _i10.Future<void>);

  @override
  _i10.Future<int> getDatabaseSize() =>
      (super.noSuchMethod(
            Invocation.method(#getDatabaseSize, []),
            returnValue: _i10.Future<int>.value(0),
          )
          as _i10.Future<int>);

  @override
  _i10.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i10.Future<void>.value(),
            returnValueForMissingStub: _i10.Future<void>.value(),
          )
          as _i10.Future<void>);
}
